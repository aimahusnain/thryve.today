generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Enrollment {
  id                    String        @id @default(uuid()) @map("_id") @db.Uuid
  studentName           String
  dateOfBirth           String
  address               String
  cityStateZip          String
  phoneHome             String
  phoneCell             String
  email                 String
  socialSecurity        String
  stateId               String
  emergencyContact      String
  emergencyRelationship String
  emergencyPhone        String
  studentSignature      String
  studentSignatureDate  DateTime
  directorSignature     String
  directorSignatureDate DateTime
  guardianSignature     String?
  guardianSignatureDate DateTime?
  paymentStatus         PaymentStatus @default(PENDING)
  paymentId             String? // To store Stripe payment ID
  paymentAmount         Float? // To store payment amount
  paymentDate           DateTime? // To store when payment was completed
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String
  image         String?

  role         UserRole  @default(USER)

  accounts Account[]
  session  Session[]
}